# This is a workflow for releasing packages in GitHub, publishing to PyPI, and building/pushing new Docker images.
# This workflow is only triggered manually, from the Actions tab. It is limited to those with `write` access
# to the repo (e.g., collaborators and orgs, people, teams given write access)
#
# The release process leans heavily on the Python Semantic Release (PSR) package, which in turn is dependent on
# conventional commits to determine release versions. Poetry is used to build the release distributions in order to
# use them for "verification" purposes *before* creating a GitHub release and publishing to PyPI. Currently, the
# verification process is simply uploading the distributions to TestPyPI and then confirming that the package can be
# accessed/used from there. In the future, a more robust end-to-end (E2E) pipeline could be triggered to run instead.
#
# References:
# https://github.community/t/who-has-permission-to-workflow-dispatch/133981
# https://github.community/t/who-can-manually-trigger-a-workflow-using-workflow-dispatch/128592
# https://python-semantic-release.readthedocs.io/en/latest/index.html
# https://www.conventionalcommits.org/en/v1.0.0/
---
name: Release

concurrency: Production

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: "Make this a pre-release"
        type: boolean
        required: true
        default: false

env:
  PYTHON_VERSION: "3.13"
  POETRY_VERSION: "2.1.4"

jobs:
  build_dist:
    name: Build and verify Python distribution
    runs-on: ubuntu-latest
    outputs:
      phylum_rel_ver: ${{ steps.get_vers.outputs.phylum_rel_ver }}
      phylum_rel_ver_nuitka: ${{ steps.get_vers.outputs.phylum_rel_ver_nuitka }}
      psr_expected_next_ver: ${{ steps.get_vers.outputs.psr_expected_next_ver }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # `python-semantic-release` needs full history to properly determine the next release version
          fetch-depth: 0

      - name: Install poetry
        run: |
          pipx install \
            --index-url "https://Phylum%2FPhylum:${{ secrets.PHYLUM_TOKEN }}@pypi.phylum.io/simple/" \
            poetry==${{ env.POETRY_VERSION }}

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config http-basic.phylum "Phylum%2FPhylum" "${{ secrets.PHYLUM_TOKEN }}"

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install the project with poetry
        run: |
          poetry env use python${{ env.PYTHON_VERSION }}
          poetry check --lock --strict
          poetry lock --no-cache
          poetry sync --verbose --with test,ci

      - name: Set to next version for build
        id: get_vers
        run: |
          curr_ver=$(poetry version --short)
          next_ver=$(poetry run semantic-release -v version --print)
          echo "psr_expected_next_ver=${next_ver}" >> "${GITHUB_OUTPUT}"
          if [ "${curr_ver}" = "${next_ver}" ]; then
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              next_ver=$(poetry run semantic-release -v --strict version --print --as-prerelease --patch)
            else
              next_ver=$(poetry run semantic-release -v --strict version --print --patch)
            fi
          else
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              next_ver=$(poetry run semantic-release -v --strict version --print --as-prerelease)
            fi
          fi
          poetry version "${next_ver}"
          phylum_rel_ver=$(poetry version --short)
          phylum_rel_ver_nuitka=${phylum_rel_ver//-rc/}
          echo "phylum_rel_ver=${phylum_rel_ver}" >> "${GITHUB_OUTPUT}"
          echo "phylum_rel_ver_nuitka=${phylum_rel_ver_nuitka}" >> "${GITHUB_OUTPUT}"

      # Run the tests for the active Python version as a sanity check.
      - name: Run tox via poetry
        run: poetry run tox

      - name: Build wheel and source distribution
        run: poetry build -vvv

      - name: Upload dist artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist
          path: ./dist/
          if-no-files-found: error

      - name: Publish to TestPyPI
        if: github.ref_name == 'main'
        # Allow for re-running the workflow, with the same release package version, for situations where that package is
        # already published to TestPyPI (e.g., failures due to TestPyPI being slow to recognize a published package).
        continue-on-error: true
        env:
          # Ref: https://python-poetry.org/docs/repositories/#configuring-credentials
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TESTPYPI_API_TOKEN }}
        run: poetry publish -vvv --repository testpypi

      # This step is currently only verifying that the package uploaded to TestPyPI can be installed and run from there.
      # This would be a good spot to trigger a more holistic E2E or integration (as it were) level testing suite. It is
      # also possible to use the `Production` environment here as a manual gating function. That is, the required
      # "reviewers" for that environment would be notified of the release and could check that the package verification
      # step(s) worked as intended before approving the release to proceed.
      - name: Verify the package
        if: github.ref_name == 'main'
        timeout-minutes: 3
        run: |
          echo "Waiting for TestPyPI release to be ready..."
          until pipx run \
            --index-url https://test.pypi.org/simple/ \
            --spec "phylum==${{ steps.get_vers.outputs.phylum_rel_ver }}" \
            --pip-args="--extra-index-url=https://pypi.org/simple/" \
            phylum-ci --version >/dev/null 2>&1; do
              sleep 5
              echo "Waiting for TestPyPI release to be ready..."
          done
          pipx run \
            --index-url https://test.pypi.org/simple/ \
            --spec "phylum==${{ steps.get_vers.outputs.phylum_rel_ver }}" \
            --pip-args="--extra-index-url=https://pypi.org/simple/" \
            phylum-init -h
          pipx run \
            --index-url https://test.pypi.org/simple/ \
            --spec "phylum==${{ steps.get_vers.outputs.phylum_rel_ver }}" \
            --pip-args="--extra-index-url=https://pypi.org/simple/" \
            phylum-ci -h

  build_windows:
    name: Build Windows ${{ matrix.name }} binary
    needs: build_dist
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: standalone
            options: --standalone --remove-output
            binary: ./build/cli.dist/phylum-ci.exe
            artifact: ./phylum-ci.zip
          - name: onefile
            options: --onefile --onefile-tempdir-spec="{CACHE_DIR}/{PRODUCT}/{VERSION}"
            binary: ./build/phylum-ci.exe
            artifact: ./build/phylum-ci.exe
    steps:
      - name: Checkout the repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Nuitka needs the packaged form and not the editable install Poetry provides
      # Ref: https://github.com/Nuitka/Nuitka/issues/2965
      - name: Download dist artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: dist
          path: ./dist

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install poetry
        run: |
          pipx install `
            --index-url "https://Phylum%2FPhylum:${{ secrets.PHYLUM_TOKEN }}@pypi.phylum.io/simple/" `
            poetry==${{ env.POETRY_VERSION }}

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config http-basic.phylum "Phylum%2FPhylum" "${{ secrets.PHYLUM_TOKEN }}"

      - name: Install the project with poetry
        run: |
          poetry check --lock --strict
          poetry lock --no-cache
          poetry sync --verbose --no-root --with compile
          poetry run python -m pip install --find-links dist --no-index phylum

      - name: Compile binary with Nuitka
        env:
          PHYLUM_REL_VER: ${{ needs.build_dist.outputs.phylum_rel_ver_nuitka }}
        run: |
          poetry run python -m nuitka `
            ${{ matrix.options }} `
            --output-dir=build `
            --output-filename="phylum-ci.exe" `
            --include-package=phylum `
            --include-package-data=phylum `
            --include-distribution-metadata=phylum `
            --product-name=phylum-ci `
            --product-version=${env:PHYLUM_REL_VER} `
            --file-version=${env:GITHUB_RUN_NUMBER} `
            --company-name="Phylum, Inc." `
            --copyright="Copyright (C) 2024 Phylum, Inc." `
            --file-description="Analyze dependencies in CI with Phylum" `
            --windows-icon-from-ico="docs/img/favicon.ico" `
            --warn-implicit-exceptions `
            --warn-unusual-code `
            --assume-yes-for-downloads `
            --report=nuitka-compilation-report.xml `
            --deployment `
            src/phylum/ci/cli.py

      # Create the archive here because the confirmation step adds files to the source path
      - name: Create standalone zip archive
        if: matrix.name == 'standalone'
        run: Compress-Archive -Path ./build/cli.dist/* -DestinationPath ${{ matrix.artifact }}

      - name: Confirm operation of binary
        env:
          PHYLUM_API_KEY: ${{ secrets.PHYLUM_TOKEN }}
          PHYLUM_BYPASS_CI_DETECTION: true
        run: |
          ${{ matrix.binary }} -h
          ${{ matrix.binary }} -vvaf

      - name: Upload ${{ matrix.name }} artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: phylum-ci-${{ matrix.name }}
          path: ${{ matrix.artifact }}
          if-no-files-found: error

      - name: Upload compilation report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: nuitka-compilation-report-${{ matrix.name }}
          path: ./nuitka-compilation-report.xml
          if-no-files-found: warn

      # Nuitka will create a crash report with a static name when there are failures
      - name: Upload crash report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: nuitka-crash-report-${{ matrix.name }}
          path: ./nuitka-crash-report.xml
          if-no-files-found: ignore

  release:
    name: Release and publish artifacts
    needs: [build_dist, build_windows]
    if: github.ref_name == 'main'
    environment:
      name: Production
      url: ${{ steps.pypi_release.outputs.url }}
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      PHYLUM_REL_VER: ${{ needs.build_dist.outputs.phylum_rel_ver }}
      PSR_EXPECTED_NEXT_VER: ${{ needs.build_dist.outputs.psr_expected_next_ver }}
      PHYLUM_TOKEN: ${{ secrets.PHYLUM_TOKEN }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # `python-semantic-release` needs full history to properly determine the next release version
          fetch-depth: 0
          # `python-semantic-release` needs this personal access token (PAT) in order to push to a protected branch.
          # This PAT is for the `phylum-bot` account and only has the `public_repo` scope to limit privileges.
          token: ${{ secrets.GH_RELEASE_PAT }}

      # This GPG key is for the `phylum-bot` account and used in order to ensure commits and tags are signed/verified.
      - name: Import GPG key for bot account
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        with:
          gpg_private_key: ${{ secrets.PHYLUM_BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PHYLUM_BOT_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Download dist artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: dist
          path: ./dist

      - name: Download build artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: ./build
          pattern: phylum-ci-*
          merge-multiple: true

      - name: Install poetry
        run: |
          pipx install \
            --index-url "https://Phylum%2FPhylum:${{ secrets.PHYLUM_TOKEN }}@pypi.phylum.io/simple/" \
            poetry==${{ env.POETRY_VERSION }}

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config http-basic.phylum "Phylum%2FPhylum" "${{ secrets.PHYLUM_TOKEN }}"

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install the project with poetry
        run: |
          poetry env use python${{ env.PYTHON_VERSION }}
          poetry check --lock --strict
          poetry lock --no-cache
          poetry sync --verbose --with ci

      - name: Update script options documentation
        run: poetry run rich-codex --verbose --skip-git-checks --no-confirm

      - name: Use Python Semantic Release to create release
        env:
          GH_TOKEN: ${{ secrets.GH_RELEASE_PAT }}
        run: |
          curr_ver=$(poetry version --short)
          if [ "${curr_ver}" = "${{ env.PSR_EXPECTED_NEXT_VER }}" ]; then
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              poetry run semantic-release -v --strict version --as-prerelease --patch
            else
              poetry run semantic-release -v --strict version --patch
            fi
          else
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              poetry run semantic-release -v --strict version --as-prerelease
            else
              poetry run semantic-release -v version
            fi
          fi

      - name: Use Python Semantic Release to publish release
        env:
          GH_TOKEN: ${{ secrets.GH_RELEASE_PAT }}
        run: poetry run semantic-release -v --strict publish --tag "v${{ env.PHYLUM_REL_VER }}"

      - name: Publish to PyPI
        id: pypi_release
        # Allow for re-running the workflow, with the same release package version,
        # for situations where that package is already published to PyPI.
        continue-on-error: true
        env:
          # Ref: https://python-poetry.org/docs/repositories/#configuring-credentials
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish -vvv
          echo "url=https://pypi.org/project/phylum/${{ env.PHYLUM_REL_VER }}/" >> "${GITHUB_OUTPUT}"

      # This is the safety net for the previous step allowing "continue-on-error"
      - name: Verify PyPI release
        timeout-minutes: 3
        run: |
          echo "Waiting for PyPI release to be ready..."
          until pipx run --spec "phylum==${{ env.PHYLUM_REL_VER }}" phylum-ci --version >/dev/null 2>&1; do
            sleep 5
            echo "Waiting for PyPI release to be ready..."
          done
          pipx run --spec "phylum==${{ env.PHYLUM_REL_VER }}" phylum-init -h
          pipx run --spec "phylum==${{ env.PHYLUM_REL_VER }}" phylum-ci -h

      - name: Trigger documentation update
        # NOTE: This is an instance where the expression syntax (`${{ }}`) is required for the `if` conditional,
        #       contrary to the GitHub workflow syntax documentation. Do not remove the expression syntax.
        if: ${{ !inputs.prerelease }}
        # Reference: https://docs.github.com/en/rest/repos/repos#create-a-repository-dispatch-event
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.GH_RELEASE_PAT }}
          script: |
            const response = await github.rest.repos.createDispatchEvent({
              owner: "phylum-dev",
              repo: "documentation",
              event_type: "trigger-update-submodule",
              client_payload: {
                repo_name: context.repo.repo,
                tag_name: "v${{ env.PHYLUM_REL_VER }}"
              },
            });
            console.log(response);

      - name: Build default docker image
        run: |
          docker build \
            --tag phylum-ci \
            --build-arg PKG_SRC=dist/phylum-*.whl \
            --build-arg PKG_NAME=phylum-*.whl \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            --secret id=PHYLUM_TOKEN \
            .

      - name: Test default docker image with pre-built distributions
        run: scripts/docker_tests.sh --image phylum-ci

      - name: Build slim docker image
        run: |
          docker build \
            --tag phylum-ci-slim \
            --build-arg PKG_SRC=dist/phylum-*.whl \
            --build-arg PKG_NAME=phylum-*.whl \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            --secret id=PHYLUM_TOKEN \
            --file Dockerfile.slim \
            .

      - name: Test slim docker image with pre-built distributions
        run: scripts/docker_tests.sh --image phylum-ci-slim --slim

      - name: Login to Docker Hub
        run: docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        run: docker login --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} ghcr.io

      - name: Create specific docker tags and push them
        run: |
          CLI_REL_VER=$(docker run --rm phylum-ci phylum --version | sed 's/phylum //')
          docker tag phylum-ci "phylumio/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}"
          docker tag phylum-ci-slim "phylumio/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}-slim"
          docker tag phylum-ci "ghcr.io/phylum-dev/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}"
          docker tag phylum-ci-slim "ghcr.io/phylum-dev/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}-slim"
          docker push "phylumio/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}"
          docker push "phylumio/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}-slim"
          docker push "ghcr.io/phylum-dev/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}"
          docker push "ghcr.io/phylum-dev/phylum-ci:${{ env.PHYLUM_REL_VER }}-CLI${CLI_REL_VER}-slim"

      - name: Tag and push latest docker images
        # Only tag and push `latest` and `slim` images when it's not a phylum-ci pre-release.
        # NOTE: This is an instance where the expression syntax (`${{ }}`) is required for the `if` conditional,
        #       contrary to the GitHub workflow syntax documentation. Do not remove the expression syntax.
        if: ${{ !inputs.prerelease }}
        run: |
          docker tag phylum-ci phylumio/phylum-ci:latest
          docker tag phylum-ci-slim phylumio/phylum-ci:slim
          docker tag phylum-ci ghcr.io/phylum-dev/phylum-ci:latest
          docker tag phylum-ci-slim ghcr.io/phylum-dev/phylum-ci:slim
          docker push phylumio/phylum-ci:latest
          docker push phylumio/phylum-ci:slim
          docker push ghcr.io/phylum-dev/phylum-ci:latest
          docker push ghcr.io/phylum-dev/phylum-ci:slim

      - name: Logout of Docker Hub
        if: always()
        run: docker logout

      - name: Logout of GitHub Container Registry
        if: always()
        run: docker logout ghcr.io
