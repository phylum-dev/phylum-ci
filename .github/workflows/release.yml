# This is a workflow for releasing packages in GitHub and publishing to PyPI.
# This workflow is only triggered manually, from the Actions tab. It is limited to those with `write` access
# to the repo (e.g., collaborators and orgs, people, teams given write access)
#
# The release process leans heavily on the Python Semantic Release (PSR) package, which in turn is dependent on
# conventional commits to determine release versions. Poetry is used to build the release distributions in order to
# use them for "verification" purposes *before* creating a GitHub release and publishing to PyPI. Currently, the
# verification process is simply uploading the distributions to TestPyPI and then confirming that the package can be
# accessed/used from there. In the future, a more robust end-to-end (E2E) pipeline could be triggered to run instead.
#
# References:
# https://github.community/t/who-has-permission-to-workflow-dispatch/133981
# https://github.community/t/who-can-manually-trigger-a-workflow-using-workflow-dispatch/128592
# https://python-semantic-release.readthedocs.io/en/latest/index.html
# https://www.conventionalcommits.org/en/v1.0.0/
---
name: Release

concurrency: Production

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: "Make this a pre-release"
        type: boolean
        required: true
        default: false

jobs:
  release:
    name: Build, Verify, Release, and Publish
    if: github.ref_name == 'main'
    environment:
      name: Production
      url: ${{ steps.psr_release.outputs.url }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # It's only one Python version specified in a "matrix", but on purpose to stay DRY
        python-version: ["3.10"]
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          # `python-semantic-release` needs full history to properly determine the next release version
          fetch-depth: 0

      - name: Install poetry
        run: pipx install poetry

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config repositories.testpypi https://test.pypi.org/legacy/

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      # TODO: Use a "CI" group to ensure only the dependencies needed for running in the CI environment are installed.
      #       This should be possible when Poetry 1.2 is available, using the groups feature:
      #       https://github.com/python-poetry/poetry/issues/1644
      #       https://github.com/phylum-dev/phylum-ci/issues/15
      - name: Install the project with poetry
        run: |
          poetry env use python${{ matrix.python-version }}
          poetry install --verbose --no-root

      - name: Set phylum_original_version value
        run: echo "phylum_original_version=$(poetry version --short)" >> $GITHUB_ENV

      - name: Set to next version for build
        run: |
          if [ ${{ github.event.inputs.prerelease }} = "true" ]; then
            poetry version $(poetry run semantic-release print-version --next --prerelease)
          else
            poetry version $(poetry run semantic-release print-version --next)
          fi

      - name: Set phylum_release_version value
        run: echo "phylum_release_version=$(poetry version --short)" >> $GITHUB_ENV

      # NOTE: Run the tests for the current active Python version, as a sanity check.
      - name: Run tox via poetry
        run: poetry run tox

      - name: Build wheel and source distribution
        run: poetry build -vvv

      - name: Publish to TestPyPI
        id: publish_test_pypi
        run: poetry publish --repository testpypi --username __token__ --password ${{ secrets.TESTPYPI_API_TOKEN }}

      # This step is currently only verifying that the package uploaded to TestPyPI can be installed and run from there.
      # This would be a good spot to trigger a more holistic E2E or integration (as it were) level testing suite. It is
      # also possible to use the `Production` environment here as a manual gating function. That is, the required
      # "reviewers" for that environment would be notified of the release and could check that the package verification
      # step(s) worked as intended before approving the release to proceed.
      - name: Verify the package
        run: >
          pipx run
          --index-url https://test.pypi.org/simple/
          --spec "phylum==${{ env.phylum_release_version }}"
          --pip-args="--extra-index-url=https://pypi.org/simple/"
          phylum-init -h

      # This step is needed b/c otherwise the Python Semantic Release `publish` cmd would bump the version a 2nd time.
      - name: Revert to original version
        run: poetry version ${{ env.phylum_original_version }}

      - name: Use Python Semantic Release to publish release
        id: psr_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: verbose
          REPOSITORY_USERNAME: __token__
          REPOSITORY_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          if [ ${{ github.event.inputs.prerelease }} = "true" ]; then
            poetry run semantic-release publish --prerelease
          else
            poetry run semantic-release publish
          fi
          echo "::set-output name=url::https://pypi.org/project/phylum/${{ env.phylum_release_version }}/"
