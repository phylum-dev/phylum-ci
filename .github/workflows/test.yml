# This is a workflow for ensuring tests pass all supported environments.
---
name: Test

on:
  # Allow running this workflow manually from the Actions tab
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  test-matrix:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout the repo
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0

      - name: Install poetry
        run: pipx install poetry

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install the project with poetry
        run: |
          poetry env use python${{ matrix.python-version }}
          poetry lock --check
          poetry install --verbose --no-root --sync --with test,ci

      - name: Run tox via poetry
        run: poetry run tox

  # This job is meant to be a sanity check on the Docker image...that it can be created and
  # have the script entry points called without error.
  docker:
    name: Docker smoke test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # It's only one Python version specified in a "matrix", but on purpose to stay DRY
        python-version: ["3.11"]
    defaults:
      run:
        shell: bash
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout the repo
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0

      - name: Install poetry
        run: pipx install poetry

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up Python
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install the project with poetry
        run: |
          poetry env use python${{ matrix.python-version }}
          poetry lock --check
          poetry install --verbose --no-root --sync

      - name: Build docker image from source
        run: |
          docker build \
            --tag phylum-ci:from-src \
            --cache-from phylumio/phylum-ci:latest \
            --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            .

      - name: Test docker image built from source
        run: |
          docker run --rm phylum-ci:from-src git --version
          docker run --rm phylum-ci:from-src phylum-ci --version
          docker run --rm phylum-ci:from-src phylum-ci --help
          docker run --rm phylum-ci:from-src phylum-init --help
          docker run --rm phylum-ci:from-src phylum --help

      - name: Build wheel and source distribution
        run: poetry build -vvv

      - name: Build docker image with pre-built distributions
        run: |
          docker build \
            --tag phylum-ci:from-dist \
            --cache-from phylumio/phylum-ci:latest \
            --build-arg PKG_SRC=dist/phylum-*.whl \
            --build-arg PKG_NAME=phylum-*.whl \
            --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            .

      - name: Test docker image built from dist
        run: |
          docker run --rm phylum-ci:from-dist git --version
          docker run --rm phylum-ci:from-dist phylum-ci --version
          docker run --rm phylum-ci:from-dist phylum-ci --help
          docker run --rm phylum-ci:from-dist phylum-init --help
          docker run --rm phylum-ci:from-dist phylum --help

  # This job reports the results of the test jobs above and is used to enforce status checks in
  # the repo settings without needing to update those settings everytime the test jobs are updated.
  test-rollup:
    name: Test rollup
    if: always()
    needs: [test-matrix, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Check for test jobs failure
        if: (needs.test-matrix.result != 'success') || (needs.docker.result != 'success')
        shell: bash
        run: |
          echo "One or more test matrix jobs was/were not successful"
          exit 1

      - name: Confirm test jobs success
        if: (needs.test-matrix.result == 'success') && (needs.docker.result == 'success')
        shell: bash
        run: echo "All test matrix jobs were successful"
